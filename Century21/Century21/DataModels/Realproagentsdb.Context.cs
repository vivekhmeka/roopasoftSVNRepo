//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Century21.DataModels
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class realproagentsdbEntities : DbContext
    {
        public realproagentsdbEntities()
            : base("name=realproagentsdbEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AGENT_INFO> AGENT_INFO { get; set; }
        public virtual DbSet<USER> USERS { get; set; }
        public virtual DbSet<COMPANY_INFO> COMPANY_INFO { get; set; }
        public virtual DbSet<User_Role> User_Role { get; set; }
    
        public virtual ObjectResult<getAgentsForCentury21Company_Result> getAgentsForCentury21Company()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getAgentsForCentury21Company_Result>("getAgentsForCentury21Company");
        }
    
        public virtual ObjectResult<getAllCompanyAdministrtors1_Result> getAllCompanyAdministrtors1(Nullable<int> roleID)
        {
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getAllCompanyAdministrtors1_Result>("getAllCompanyAdministrtors1", roleIDParameter);
        }
    
        public virtual ObjectResult<getAllCompanyAdministrtors_Result> getAllCompanyAdministrtors(Nullable<int> roleID)
        {
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getAllCompanyAdministrtors_Result>("getAllCompanyAdministrtors", roleIDParameter);
        }
    }
}
